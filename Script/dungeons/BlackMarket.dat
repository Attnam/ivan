/*
 *
 *  Iter Vehemens ad Necem (IVAN)
 *  Copyright (C) Timo Kiviluoto
 *  Released under the GNU General
 *  Public License
 *
 *  See LICENSING which should be included
 *  along with this file for more details
 *
 */

/*
 * NOTICE!!!
 *
 * This file contains SPOILERS, which might ruin your IVAN experience
 * totally. Also, editing anything can DESTROY GAME BALANCE or CAUSE
 * OBSCURE BUGS if you don't know what you're doing. So from here on,
 * proceed at your own risk!
 */

Dungeon BLACK_MARKET;
{
  Levels = 2;
  Description = "black market";
  ShortDescription = "Black Market";

  LevelDefault
  {
    FillSquare = COBBLE_STONE solidterrain(GROUND), DIRT earth;
    TunnelSquare = COBBLE_STONE solidterrain(GROUND), 0;
    BackGroundType = GRAY_FRACTAL;
    Size = 42, 26;
    GenerateMonsters = false;
    Rooms = 1;
    Items = 0;
    IsOnGround = false;
    TeamDefault = GUILD_TEAM;
    IgnoreDefaultSpecialSquares = true;
    AutoReveal = false;
    CanGenerateBone = false;
    EarthquakesAffectTunnels = false;
    IsCatacomb = false;
    LOSModifier = 48;
    DifficultyBase = 200;
    DifficultyDelta = 40;
    MonsterAmountBase = 10;
    MonsterAmountDelta = 0;
    MonsterGenerationIntervalBase = 64;
    MonsterGenerationIntervalDelta = -16;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 70;
    EnchantmentPlusChanceDelta = 5;
    ItemMinPriceBase = 100;
    ItemMinPriceDelta = 10;
    AudioPlayList =
    {
      3,
      "Dungeon.mid",
      "Dungeon2.mid",
      "Dungeon3.mid";
    }

    RoomDefault
    {
      Pos = 2:40,2:24;
      Size = 4:6,4:6;
      AltarPossible = false;
      WallSquare = COBBLE_STONE solidterrain(GROUND), BASALT wall(BRICK_OLD);
      FloorSquare = COBBLE_STONE solidterrain(FLOOR), 0;
      DoorSquare = COBBLE_STONE solidterrain(FLOOR), BEECH_WOOD door;
      GenerateDoor = false;
      DivineMaster = 0;
      GenerateTunnel = false;
      GenerateLanterns = true;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;
    }
  }

  Level 0; /* Entrance Hall */
  {
    Room
    {
      Pos = 4, 5;
      Size = 36, 15;
      Shape = ROUND_CORNERS;

      OTerrainMap
      {
        Pos = 1,1;
        Size = 34,13;
        Types
        {
          X = BLACK_IRON barwall;
          # = BASALT wall(BRICK_OLD);
          < = 0;
          > = 0;
          1 = BLACK_IRON sign { Text = "Welcome to the Black Market! We are open 24/7."; }
          2 = BLACK_IRON sign { Text = "If you need it, we have it. If we don't have it, you didn't need it."; }
          3 = BLACK_IRON sign { Text = "Don't even think about stealing anything. Thieves will be killed."; }
          4 = BLACK_IRON sign { Text = "Don't mind the guards, they are here for your protection!"; }
        }
      }
      {
        ..................................
        ..................................
        ...XXX...#....#....#....#...XXX...
        ...X.X..###..###..###..###..X.X...
        ...XXX...#....#....#....#...XXX...
        .......1..................3.......
        ....<........................>....
        .......2..................4.......
        ...XXX...#....#....#....#...XXX...
        ...X.X..###..###..###..###..X.X...
        ...XXX...#....#....#....#...XXX...
        ..................................
        ..................................
      }

      CharacterMap
      {
        Pos = 1,1;
        Size = 34,13;
        Types
        {
          # = 0;
          X = 0;
          G = guard(SHOP);
          w = mindworm(BOIL);
          f = mysticfrog(DARK);
          K = veterankamikazedwarf(MELLIS);
          d = darkmage(BATTLE_MAGE);
          n = necromancer(MASTER_NECROMANCER);
          D = darkknight(ELITE);
          F = darkknight(ELITE_FEMALE);
          m = mistress(WHIP_CHAMPION);
          I = invisiblestalker(SLAYER);
          s = siren(PINK_SIREN);
          S = siren(GREEN_SIREN);
          1 = golem(DARK_GOLD);
          2 = golem(MITHRIL);
          3 = golem(SAPPHIRE);
          4 = golem(GREEN_JADE);
        }
      }
      {
        .I................................
        .....F.....D.........m.......I....
        ...XXX.2.#....#....#....#..3XXX...
        ...XfX..###..###..###..###..XdX...
        G..XXX...#....#.s..#....#K..XXX..G
        ...........m......................
        ..G............................G..
        .....................F............
        G..XXX...#....#....#....#...XXX..G
        ...XwX..###..###.S###..###..XnX...
        .I.XXX...#....#....#.I..#.D.XXX...
        .......n..I......D...........4..I.
        ...1.....................m........
      }

      Square, Pos 5, 7;
      {
        OTerrain = stairs(STAIRS_UP);
        EntryIndex = STAIRS_UP;
      }

      Square, Pos 30, 7;
      {
        OTerrain = stairs(STAIRS_DOWN);
        EntryIndex = STAIRS_DOWN;
      }
    }
  }

  Level 1; /* The Market Proper */
  {
    Room
    {
      Pos = 2, 2;
      Size = 38, 22;
      DivineMaster = MELLIS;
      Type = ROOM_SHOP;

      Square, Pos 19, 11;
      {
        OTerrain = stairs(STAIRS_UP);
        EntryIndex = STAIRS_UP;
      }

      Square, Pos 18, 10;
      {
        Character = shopkeeper(BLACK_MARKET) { Flags = IS_MASTER; }
      }

      ItemMap
      {
        Size = 36, 20;
        Pos = 1, 1;
        Types
        {
          1 == Random { MinPrice = 250; ConfigFlags = NO_BROKEN; }
          2 == Random { Category = AMULET; }
          3 == Random { Category = RING; }
          4 == Random { MinPrice = 300; Category = BELT; ConfigFlags = NO_BROKEN; }
          5 == Random { MinPrice = 300; Category = CLOAK; ConfigFlags = NO_BROKEN; }
          6 == Random { Category = SCROLL; }
          7 == Random { Category = TOOL|WAND; }
          8 == Random { MinPrice = 40; Category = FOOD|POTION; ConfigFlags = NO_BROKEN; }
          9 == Random { MinPrice = 3000; }
        }
      }
      {
        111111111111111181111111111111111111
        111151111111111111111111111111111111
        111111111111111111111113111111171111
        111111111119111111111111111111111111
        111151111111111131111411111111111113
        111111161111111111111111111111111111
        111111111111111111111111112111111111
        151111111111111161111111111111111111
        111121111111111111111111111111111111
        11111111111111118..11111111811111111
        11111111111111111..11111111111111111
        111111141111111111111111111111111111
        111111111111111111111118112111111111
        171111111111116111111111111111111111
        111111111111111111111111111113111111
        111111111211111111111115111111111611
        111711111111111111111111711111911111
        111111111141111111111111111111111111
        111111111111111311111121111111111111
        141111111111111111111111111111111116
      }
    }
  }
}
