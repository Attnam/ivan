/*
 *
 *  Iter Vehemens ad Necem (IVAN)
 *  Copyright (C) Timo Kiviluoto
 *  Released under the GNU General
 *  Public License
 *
 *  See LICENSING which should be included
 *  along with this file for more details
 *
 */

/*
 * NOTICE!!!
 *
 * This file contains SPOILERS, which might ruin your IVAN experience
 * totally. Also, editing anything can DESTROY GAME BALANCE or CAUSE
 * OBSCURE BUGS if you don't know what you're doing. So from here on,
 * proceed at your own risk!
 */

Dungeon REBEL_CAMP;
{
  Levels = 1;
  Description = "Rebel Camp";
  ShortDescription = "RC";

  Level 0;
  {
    LevelMessage = "You pass the sentries and draw closer to the camp.";
    Description = "Rebel Camp";
    ShortDescription = "Rebel Camp";
    FillSquare = solidterrain(GRASS_TERRAIN), 0;
    Size = 55, 55;
    GenerateMonsters = false;
    Rooms = 10:15;
    Items = 0;
    IsOnGround = true;
    TeamDefault = REBEL_TEAM;
    LOSModifier = 48;
    IgnoreDefaultSpecialSquares = false;
    AutoReveal = false;
    CanGenerateBone = false;
    DifficultyBase = 50;
    DifficultyDelta = 0;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 5;
    EnchantmentPlusChanceDelta = 0;
    BackGroundType = GREEN_FRACTAL;
    EarthquakesAffectTunnels = false;
    AudioPlayList =
    {
      1,
      "Empty.mid";
    }

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 4:6,4:6;
      AltarPossible = false;
      WallSquare = solidterrain(GRASS_TERRAIN), wall(TENT_WALL);
      FloorSquare = solidterrain(GRASS_TERRAIN), 0;
      DoorSquare = solidterrain(GRASS_TERRAIN), door(CURTAIN);
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = false;
      GenerateLanterns = true;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = ROUND_CORNERS;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;
    }

    Square, Pos XSize/2, 0;
    {
      EntryIndex = STAIRS_UP;
    }

    /* Forest trees & Decorations */
    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = boulder(1);
      Times = 10;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = boulder(2);
      Times = 10;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = decoration(BIRCH);
      Times = 50:150;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = decoration(TEAK);
      Times = 50:150;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = decoration(DEAD_TREE);
      Times = 10;
    }

    Square, BoundedRandom XSize/3, YSize/3, 4*XSize/3, 4*YSize/3, NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = decoration(WELL);
    }

    Square, Random IN_ROOM|HAS_NO_OTERRAIN;
    {
      Items == itemcontainer(CHEST)
      {
        Parameters = LOCKED;
        ItemsInside = { 3,  Random { Category = WEAPON; }, potion(VIAL) { SecondaryMaterial = HEALING_LIQUID; }, DARK_BREAD loaf; }
      }
    }

    /* People */
    Square, Pos 0, 0;
    {
      Character = guard(REBEL) { WayPoint = { 4, 0, 0, XSize - 1, 0, XSize - 1, YSize - 1, 0, YSize - 1; } }
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      Character = cossack(REBEL_SOLDIER);
      Times = 15;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      Character = cossack(REBEL_LIEUTENANT);
      Times = 5;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = farmer(REBEL_CAMP);
      Times = 5;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = housewife(REBEL_CAMP);
      Times = 5;
    }

    Square, Random IN_ROOM;
    {
      Character = child(BOY);
      Times = 1:3;
    }

    Square, Random IN_ROOM;
    {
      Character = child(GIRL);
      Times = 1:3;
    }

    Square, Random IN_ROOM;
    {
      Character = guard(REBEL);
      Times = 2:5;
    }

    Square, Random IN_ROOM;
    {
      Character = mysticfrog(LIGHT);
      Times = 1:2;
    }

    Square, Random IN_ROOM;
    {
      Character = necromancer(MASTER_NECROMANCER);
      Times = 2;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      Character = largerat;
      Times = 1:4;
    }

    /* Leader Room */
    Room
    {
      Size = 7,7;
      GenerateDoor = false;
      GenerateLanterns = false;
      Type = ROOM_OWNED_AREA;

      OTerrainMap
      {
        Pos = 1,1;
        Size = 5,5;

        Types
        {
          a = decoration(ARM_CHAIR);
          | = decoration(CARPET);
          d = decoration(DESK);
          b = decoration(EXPENSIVE_BED);
          T = decoration(TABLE);
          B = decoration(BENCH);
          x = olterraincontainer(CHEST_OF_DRAWERS) { ItemsInside == Random { MinPrice = 100; Times = 3; Category = CLOAK|BODY_ARMOR|BELT|BOOT|GAUNTLET; ConfigFlags = NO_BROKEN; } }
        }
      }
      {
        .da..
        .....
        ..T.b
        x....
        .B.B.
      }

      ItemMap
      {
        Pos = 0,0;
        Size = 7,6;

        Types
        {
          # == 0;
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
          c == Random { MinPrice = 350; Category = WEAPON|SHIELD; ConfigFlags = NO_BROKEN; Enchantment = 3; }
          n == trinket(POTTED_PLANT);
        }
      }
      {
        .#2###.
        ##...##
        #.....#
        3c....4
        #....n#
        ##...##
      }

      CharacterMap
      {
        Pos = 1,1;
        Size = 5,5;

        Types
        {
          # = 0;
          h = harvan { Flags = IS_MASTER; }
          g = guard(REBEL);
        }
      }
      {
        #.h.#
        g...g
        .....
        .....
        #...#
      }

      Square, Pos 3,6;
      {
        OTerrain = door(CURTAIN);
      }
    }

    /* Shop */
    Room
    {
      Size = 7,7;
      GenerateDoor = false;
      GenerateLanterns = false;
      Type = ROOM_SHOP;

      ItemMap
      {
        Pos = 0,0;
        Size = 7,7;

        Types
        {
          # == 0;
          1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          a == Random { MinPrice = 250; Category = HELMET|CLOAK|BODY_ARMOR|BELT|BOOT|GAUNTLET; }
          d == Random { MinPrice = 250; Category = RING|AMULET; }
          w == Random { MinPrice = 500; Category = WEAPON|SHIELD; }
          e == Random { MinPrice = 10; Category = FOOD|POTION; }
          u == Random { MinPrice = 200; Category = WAND|TOOL; }
          v == Random { MinPrice = 500; Category = SCROLL|TOOL; }
          s = { 2, belt(BELT_OF_CARRYING), wand(WAND_OF_STRIKING); }
        }
      }
      {
        .##2##.
        ##eeu##
        #aeeew#
        3au.ee.
        #adevv#
        ##dws##
        .##1##.
      }

      Square, Pos 3,3;
      {
        Character = shopkeeper(REBEL_CAMP) { Flags = IS_MASTER; }
        OTerrain = decoration(CHAIR);
      }

      Square, Pos 6,3;
      {
        OTerrain = door(CURTAIN);
      }
      Square, Pos 7,2;
      {
        Character = guard(REBEL);
      }
      Square, Pos 7,4;
      {
        Character = guard(REBEL);
      }
    }

    /* Kamikaze Room */
    Room
    {
      Size = 6,6;

      CharacterMap
      {
        Pos = 1,1;
        Size = 4,4;

        Types
        {
          k = kamikazedwarf(LEGIFER);
          K = veterankamikazedwarf(LEGIFER);
        }
      }
      {
        .kk.
        k..k
        kK.k
        .kk.
      }
    }

    /* Other Rooms */
    Room
    {
      Shape = RECTANGLE;

      Square, Random;
      {
        OTerrain = decoration(CHEAP_BED);
        Times = 4:10;
      }
    }

    Room
    {
      Shape = RECTANGLE;

      Square, Random;
      {
        OTerrain = decoration(CHEAP_BED);
        Times = 4:10;
      }
    }

    Room
    {
      Square, Random HAS_NO_OTERRAIN;
      {
        OTerrain = decoration(TABLE);
      }

      Square, Random HAS_NO_OTERRAIN;
      {
        OTerrain = decoration(CHAIR);
        Times = 1:3;
      }
    }

    Room
    {
      Square, Random HAS_NO_OTERRAIN;
      {
        OTerrain = decoration(WORK_BENCH);
      }
    }
  }
}
